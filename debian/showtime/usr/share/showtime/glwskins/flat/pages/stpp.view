#import "skin://theme.view"

$self.close ?= $view.stppstatus.close;

coreAttach($self.model.remoteurl, $view.stppstatus, {

  widget(container_y, {

    zbox({
      height: 3em;
      quad({
        color: select($view.stppstatus.error,
                      [0.4, 0.04, 0.04],
                      [0.04, 0.13, 0.4]);
      });
      widget(container_x, {
        widget(container_z, {
          width: 4em;

          GridItemHighlight();
          focusable: 0.1;
          onEvent(activate, {
            $self.close = 1;
          });


          icon({
            source: "skin://icons/ic_cancel_48px.svg";
            align: center;
          });
        });

        label({
          filterConstraintX: true;
          size: 1.2em;
          align: center;
          caption: select($view.stppstatus.error,
                          fmt(_("Remote control - %s"), $view.stppstatus.error),
                          fmt(_("Remote controlling %s"), $core.app.systemname));
        });

        widget(dummy, {
          width: 4em;
        });
      });
    });

    widget(container_z, {
      hidden: select($view.stppstatus.error, true, false);
      filterConstraintY: true;
      widget(layer, {
        alpha: iir(1 - $ui.screensaverActive, 8);
        widget(playfield, {
          effect: blend;
          noInitialTransform: true;
          alpha: 1 - iir(clamp(getLayer(), 0, 1), 7) * 0.66;

          onEvent(navOpen, deliverEvent($core.navigators.current.eventSink));
          onEvent(reloadData, deliverEvent($core.navigators.current.eventSink));
          onEvent(back, deliverEvent($core.navigators.current.eventSink));
          onEvent(playTrackFromSource, deliverEvent($core.playqueue.eventSink));

          cloner($core.navigators.current.pages, loader, {
	    noInitialTransform: true;
	    source: translate($self.model.type,
                              select(isVoid($self.model.type),
                                     "skin://pages/back.view",
                                     "skin://pages/" + $self.model.type + ".view"),
                              "video", "skin://pages/stppvideo.view",
                              "stpp", "skin://pages/stppstpp.view");
          });
        });
	cloner($core.popups, loader, {
	  source: "skin://popups/" + $self.type + ".view";
	});
      });

      widget(container_y, {
        space(1);
        widget(container_y, {
          delta($ui.universeBottomHeight, getHeight());

          expediteSubscriptions: true;

          style(playdeckText, {
            font: "skin://fonts/RobotoCondensed-Regular.ttf";
          });

          widget(loader, {
            autohide: true;
            source: translate($core.media.current.type, "",
                              "tracks", "skin://playdecks/" + $ui.orientation + "/tracks.view",
                              "radio",  "skin://playdecks/" + $ui.orientation + "/radio.view"
                             );
          });

          cloner($core.notifications.nodes, container_z, {
            widget(quad, {
              color: 0;
              alpha: 0.2;
            });

            widget(label, {
              padding: [2em, 0.5em];
              caption: $self.text;
            });
          });

          widget(dummy, {
            height: 0;
          });
        });
      });
    });
  });
});
